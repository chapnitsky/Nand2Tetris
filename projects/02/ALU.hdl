// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   
    Mux16(a=x,b[0..15]=false,sel=zx,out=zxx);//x or zero choice by zx flag
    Not16(in=zxx,out=notx);//saving not x in a variable
    Mux16(a=zxx,b=notx,sel=nx,out=nxx);//x or notx choice by nx flag

    Mux16(a=y,b[0..15]=false,sel=zy,out=zyy);//y or zero choice by zy flag
    Not16(in=zyy,out=noty);//not y in a variable
    Mux16(a=zyy,b=noty,sel=ny,out=nyy);//y or noty choice by ny flag
    
    Add16(a=nxx,b=nyy,out=xplusy);//x+y saving in a variable
    And16(a=nxx,b=nyy,out=xandy);//x&y saving in a variable
    Mux16(a=xandy,b=xplusy,sel=f,out=f1);//choose x+y or x&y by f flag
    Not16(in=f1,out=nf1);//not output, saving in a variable
    Mux16(a=f1,b=nf1,sel=no,out[0..7]=f21, out[8..15]=f22);//choose output or not output by no flag 
    Or8Way(in=f21,out=o1);//for zr flag, first half OR 
	Or8Way(in=f22,out=o2);//for zr flag, second half OR
	Or(a=o1, b=o2, out=o);//Actual OR
    Not(in=o,out=zr);//Sending to zr output after not

    And16(a[0..15]=true,b[0..7]=f21, b[8..15]=f22,out[15]=ng,out[0..14]=drop); //Setting ng accordingly to output, only the last bit 
    Or16(a[0..7]=f21, a[8..15]=f22,b[0..15]=false,out=out);//Sending final output
}
